[
  {
    "id": "hnrk8qmheqbwxius3brqxohqrfmgdrphtirxo",
    "author": {
      "peer": "hyyg555wwkkutaysg6yr67qnu5d5ji54iur3n5uzzszndh8dp7ofue",
      "urn": "rad:git:hnrk81wcokr48mkm544kh74kc9fqz84d3rfcy",
      "profile": {
        "name": "sebastinez",
        "ens": {
          "name": "sebastinez.radicle.eth"
        }
      }
    },
    "title": "Testing strategy",
    "state": {
      "status": "open"
    },
    "comment": {
      "author": {
        "peer": "hyyg555wwkkutaysg6yr67qnu5d5ji54iur3n5uzzszndh8dp7ofue",
        "urn": "rad:git:hnrk81wcokr48mkm544kh74kc9fqz84d3rfcy",
        "profile": {
          "name": "sebastinez",
          "ens": {
            "name": "sebastinez.radicle.eth"
          }
        }
      },
      "body": "We should define the scope we want to test in integration vs component testing (I don't mention E2E here on purpose since in our E2E tests we stubbed all responses and never hit a real server which equals to integration testing).\n\nWhile integration testing allows us to traverse the application and test navigation, component testing allows us to mount a component in isolation and check all the possible edge cases and possible regressions, and unit testing goes one step further to just individual functions on their correctness.\n\nIntegration testing npm run test:e2e eventually should be npm run test:integration\n\n**Connection through mocked Web3Provider**\n- Navigation through different URLs (e.g. the project pages, commits, issues, patches, etc.)\n- Assert the URLs we're hitting and that they update correctly, when state changes\n- Assert the least amount of display logic (we should leave that to component testing)\n  If we are able to navigate to the correct URL and get the correct props, we shouldn't need to assert every piece of text.\nComponent testing npm run test:components\n\n- Assert the correct rendering\n- Test that the state of the component updates accordingly where applicable.\n**Unit tests npm run test:unit**\n\n- Util functions\nClasses (static and methods)\nI'll keep updating this issue.\nP.S.: Testing is not my expertise so any feedback is welcome.",
      "reactions": {},
      "replies": null,
      "timestamp": 1656509367
    },
    "discussion": [],
    "labels": ["discussion"],
    "timestamp": 1656509367
  },
  {
    "id": "hnrkj4c35uoyceb3d1dsscx8qq55cikrd1aio",
    "author": {
      "peer": "hyyg555wwkkutaysg6yr67qnu5d5ji54iur3n5uzzszndh8dp7ofue",
      "urn": "rad:git:hnrk81wcokr48mkm544kh74kc9fqz84d3rfcy",
      "profile": {
        "name": "sebastinez",
        "ens": {
          "name": "sebastinez.radicle.eth"
        }
      }
    },
    "title": "Update README",
    "state": {
      "status": "closed"
    },
    "comment": {
      "author": {
        "peer": "hyyg555wwkkutaysg6yr67qnu5d5ji54iur3n5uzzszndh8dp7ofue",
        "urn": "rad:git:hnrk81wcokr48mkm544kh74kc9fqz84d3rfcy",
        "profile": {
          "name": "sebastinez",
          "ens": {
            "name": "sebastinez.radicle.eth"
          }
        }
      },
      "body": "We should define the scope we want to test in integration vs component testing (I don't mention E2E here on purpose since in our E2E tests we stubbed all responses and never hit a real server which equals to integration testing).\n\nWhile integration testing allows us to traverse the application and test navigation, component testing allows us to mount a component in isolation and check all the possible edge cases and possible regressions, and unit testing goes one step further to just individual functions on their correctness.\n\nIntegration testing npm run test:e2e eventually should be npm run test:integration\n\n**Connection through mocked Web3Provider**\n- Navigation through different URLs (e.g. the project pages, commits, issues, patches, etc.)\n- Assert the URLs we're hitting and that they update correctly, when state changes\n- Assert the least amount of display logic (we should leave that to component testing)\n  If we are able to navigate to the correct URL and get the correct props, we shouldn't need to assert every piece of text.\nComponent testing npm run test:components\n\n- Assert the correct rendering\n- Test that the state of the component updates accordingly where applicable.\n**Unit tests npm run test:unit**\n\n- Util functions\nClasses (static and methods)\nI'll keep updating this issue.\nP.S.: Testing is not my expertise so any feedback is welcome.",
      "reactions": {},
      "replies": null,
      "timestamp": 1656509367
    },
    "discussion": [],
    "labels": ["discussion"],
    "timestamp": 1656509367
  }
]
